{"version":3,"sources":["inputs.js","country.js","App.js","serviceWorker.js","index.js"],"names":["Inputs","props","onInputChange","event","setState","inputValue","target","value","onEnter","e","key","onInputClick","state","this","inputNode","focus","type","placeholder","onChange","onKeyDown","ref","node","className","React","Component","useStyles","makeStyles","card","maxWidth","media","height","Countries","fetchCountries","countryName","fetch","then","res","json","status","Error","countries","isEmpty","length","isLoading","errorText","catch","err","message","searchCountry","classes","AppBar","Toolbar","map","country","Card","id","CardActionArea","Typography","gutterBottom","variant","component","name","capital","region","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56dfafd6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nexport default class Inputs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputValue: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputNode.focus();\r\n  }\r\n\r\n  onInputChange = event => {\r\n    this.setState({ inputValue: event.target.value });\r\n  };\r\n\r\n  onEnter = e => {\r\n    if (e.key === \"Enter\") {\r\n      this.props.onInputClick(this.state.inputValue);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span>Country name: </span>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Searchâ€¦......\"\r\n          onChange={this.onInputChange}\r\n          onKeyDown={e => this.onEnter(e)}\r\n          ref={node => (this.inputNode = node)}\r\n          className=\"searchfeild\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Inputs from \"./inputs.js\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  card: {\r\n    maxWidth: 200\r\n  },\r\n  media: {\r\n    height: 100\r\n  }\r\n});\r\n\r\nexport default class Countries extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isEmpty: false,\r\n      isLoading: false,\r\n      errorText: \"\",\r\n      countries: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true });\r\n\r\n    this.fetchCountries();\r\n  }\r\n\r\n  fetchCountries = (countryName = \"\") => {\r\n    if (countryName) {\r\n      fetch(`https://restcountries.eu/rest/v2/name/${countryName}`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          if (res.status === 404) {\r\n            throw new Error(\"No Data\");\r\n          }\r\n          return res;\r\n        })\r\n        .then(res =>\r\n          this.setState({\r\n            countries: res,\r\n            isEmpty: res.length === 0,\r\n            isLoading: false,\r\n            errorText: \"\"\r\n          })\r\n        )\r\n        .catch(err =>\r\n          this.setState({\r\n            isLoading: false,\r\n            errorText: err.message,\r\n            countries: []\r\n          })\r\n        );\r\n    } else {\r\n      fetch(\"https://restcountries.eu/rest/v2/all\")\r\n        .then(res => res.json())\r\n        .then(res =>\r\n          this.setState({\r\n            countries: res,\r\n            isEmpty: res.length === 0,\r\n            isLoading: false\r\n          })\r\n        )\r\n        .catch(err =>\r\n          this.setState({ isLoading: false, errorText: err.message })\r\n        );\r\n    }\r\n  };\r\n\r\n  searchCountry = countryName => {\r\n    this.setState({ isLoading: true });\r\n\r\n    this.fetchCountries(countryName);\r\n  };\r\n\r\n  render() {\r\n    const { isEmpty, isLoading, errorText, countries } = this.state;\r\n    const classes = useStyles;\r\n    return (\r\n      <div>\r\n        <AppBar>\r\n          <Toolbar>Search your Country</Toolbar>\r\n        </AppBar>\r\n\r\n        <Inputs onInputClick={this.searchCountry} />\r\n        {errorText ? (\r\n          <p>{errorText}</p>\r\n        ) : isEmpty ? (\r\n          <p>No Data</p>\r\n        ) : isLoading ? (\r\n          <p>Loading ...</p>\r\n        ) : (\r\n          countries.map(country => (\r\n            <Card className={classes.card} id=\"card\">\r\n              <CardActionArea className=\"cardArea\">\r\n                <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  <p key={country.name} className=\"paragraph\">\r\n                    Name: {country.name}\r\n                  </p>\r\n                  <p key={country.capital} className=\"paragraph\">\r\n                    Capital: {country.capital}\r\n                  </p>\r\n                  <p key={country.region} className=\"paragraph\">\r\n                    Region: {country.region}\r\n                  </p>\r\n                </Typography>\r\n              </CardActionArea>\r\n            </Card>\r\n          ))\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport Countries from \"./country.js\";\nfunction App() {\n  return (\n    <div>\n      <Countries/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}